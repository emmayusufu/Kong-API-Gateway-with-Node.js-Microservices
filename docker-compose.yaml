services:
  # Kong Database
  kong-database:
    image: postgres
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kongpass
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kong Gateway
  kong:
    image: kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000" # Proxy port
      - "8001:8001" # Admin API port
      - "8002:8002" # Admin GUI port
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
  # User Service
  user-service:
    build: ./services/user-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
    networks:
      - kong-net

  # Product Service
  product-service:
    build: ./services/product-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
    networks:
      - kong-net

  # Order Service
  order-service:
    build: ./services/order-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
    networks:
      - kong-net

  # Notification Service
  notification-service:
    build: ./services/notification-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
    networks:
      - kong-net

volumes:
  kong_data:

networks:
  kong-net:
    driver: bridge
